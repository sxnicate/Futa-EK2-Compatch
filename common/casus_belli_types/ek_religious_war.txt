### New cb - Cleanse abomination
cleanse_abominations = {
	# COMP 1.9 TODO: CB ICON
	group = religious

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	# Additional requirements to the defines in 00_casus_belli_groups.txt
	allowed_for_character = {
		scope:attacker.faith = {
			NOT = { has_doctrine_parameter = unreformed }
		}
	}

	allowed_for_character_display_regardless = {
		piety_level >= 2
	}
	
	### Can use against:
		# - An undead when you consider Undeath & Necromancy criminal
		# - A Vampire when you consider Vampirism criminal
		# - A Lycan when you consider Lycanthropy criminal
	allowed_against_character = {
		scope:attacker = {
			OR = {
				faith = {
					has_doctrine_parameter = cleanse_abominations_lycanthropes_rulers
					scope:defender = { is_known_lycan = yes }
				}
				faith = {
					has_doctrine_parameter = cleanse_abominations_vampires_rulers
					scope:defender = { is_known_vampire = yes }
				}
				faith = {
					has_doctrine_parameter = cleanse_abominations_undead_rulers
					scope:defender = { is_undead = yes }
				}
				faith = {
					has_doctrine_parameter = cleanse_abominations_necromancers_rulers
					scope:defender = { is_known_necromancer = yes }
				}
				culture = {
					has_cultural_parameter = cleanse_abominations_undead_rulers
					scope:defender = { is_undead = yes }
				}
				culture = {
					has_cultural_parameter = cleanse_abominations_necromancers_rulers
					scope:defender = { is_known_necromancer = yes }
				}
			}
			ALL_FALSE = {
				top_liege = scope:defender.top_liege
				liege = scope:defender
			}
		}
	}
	target_titles = neighbor_land_or_water
	target_title_tier = all
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder

	valid_to_start = {
		scope:target = {
			tier = tier_duchy
		}
	}

	should_invalidate = {
		OR = {
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier = tier_county
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
				}
			}
			#Faith change does not immediately invalidate, it's run through event war_event.3100
			scope:war = { exists = var:invalidate_defender_faith_change }
			scope:war = { exists = var:invalidate_attacker_faith_change }
		}
	}

	on_invalidated_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					NOT = {
						any_in_list = {
							list = target_titles
							any_in_de_jure_hierarchy = {
								tier = tier_county
								holder = {
									OR = {
										this = scope:defender
										target_is_liege_or_above = scope:defender
									}
								}
							}
						}
					}
				}
				desc = msg_religious_war_invalidation_region_message
			}
			triggered_desc = {
				trigger = {
					scope:war = {
						OR = {
							exists = var:invalidate_defender_faith_change
							exists = var:invalidate_attacker_faith_change
						}
					}
				}
				desc = msg_religious_war_invalidated_hostility_level_message
			}
		}
	}

	on_invalidated = {
		
	}

	cost = {
		piety = {
			add = {
				value = 200
				desc = CB_BASE_COST
			}
			# Faith Doctrine Piety Discounts
			if = {
				limit = {
					scope:attacker.faith = {
						has_doctrine_parameter = cheaper_cleanse_abominations_active
					}
				}
				multiply = {
					value = 0.8
					desc = CB_REDUCED_CLEANSE_ABOMINATIONS_COST
				}
			}

			# Bellum Justum Perk
			if = {
				limit = {
					scope:attacker = {
						has_perk = bellum_justum_perk
					}
				}
				multiply = {
					add = bellum_justum_discount_percentage
					divide = 100
					desc = CB_ATTACKER_BELLUM_JUSTUM
				}
			}

			# Dynasty Warfare Perk
			if = {
				limit = {
					scope:attacker = {
						has_dynasty = yes
						dynasty = {
							has_dynasty_perk = warfare_legacy_2
						}
					}
				}
				multiply = {
					value = warfare_legacy_2_discount
					desc = CB_ATTACKER_DYNASTY_WARFARE
				}
			}

			# Vassal contract in-realm cost reduction
			if = {
				limit = {
					scope:attacker = {
						is_independent_ruler = no
						vassal_contract_has_flag = vassal_contract_war_override
						liege = scope:defender.liege
					}
				}
				multiply = {
					value = war_declaration_rights_allowed_cost_reduction
					desc = "CB_ATTACKER_VASSAL_CONTRACT"
				}
			}

			if = {
				limit = {
					has_game_rule = no_cost_casus_belli_costs
				}
				multiply = {
					value = 0
					desc = CB_GAME_RULE_NO_COST
				}
			}
		}
	}

	on_declaration = {
		on_declared_war = yes
	}

	on_victory_desc = {
		desc = cleanse_abominations_victory_desc
	}

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }

		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

		#EP2 accolade glory gain from winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		create_title_and_vassal_change = {
			type = conquest_holy_war
			save_scope_as = change
			add_claim_on_loss = yes
		}

		# go through the dejure hierarchy under target titles, transfer titles held by abominations
		# take the holder as vassal otherwise and don't go deeper
		every_in_list = {
			list = target_titles
			custom_tooltip = RELIGIOUS_CB_TITLE

			save_scope_as = target_title # For the vassalization trigger.

			# Compile a list of all counties in the kingdom we will take from the defender.
			every_in_de_jure_hierarchy = {
				continue = {
					tier > tier_county
				}
				limit = {
					tier = tier_county

					# Current holder must be a (sub)vassal of the defender (no poaching titles from 3rd parties!)
					exists = holder
					holder = {
						OR = {
							this = scope:defender
							target_is_liege_or_above = scope:defender
						}
					}
				}
				add_to_list = titles_taken
			}

			# If we can take the current holder of a title as a vassal instead of siezing their land directly, do so.
			every_in_de_jure_hierarchy = {
				limit = {
					tier >= tier_county
					# If there is no holder they can't be vassalized!
					exists = holder

					# We can only vassalize characters of a lower tier than us.
					holder.highest_held_title_tier < scope:attacker.highest_held_title_tier

					# Abomination Check
					scope:attacker.faith = {
						OR = {
							# Vassals who are not considered Abominations by the faith are 'liberated' and become vassals under the attacker.
							NAND = {
								has_doctrine_parameter = cleanse_abominations_lycanthropes_rulers
								scope:defender = { is_known_lycan = yes }
							}
							NAND = {
								has_doctrine_parameter = cleanse_abominations_vampires_rulers
								scope:defender = { is_known_vampire = yes }
							} 
							NAND = {
								has_doctrine_parameter = cleanse_abominations_undead_rulers
								scope:defender = { is_undead = yes }
							}
							NAND = {
								has_doctrine_parameter = cleanse_abominations_necromancers_rulers
								scope:defender = { is_known_necromancer = yes }
							}
						}
					}	

					# De Jure Hierarchy Check
					holder = {
						# Only (sub)vassals of the defender can be considered for transfer (no poaching vassals from 3rd parties without fighting them!)
						target_is_liege_or_above = scope:defender

						# *All* of a character's subrealm must be within the target area. If we're holy warring for Jerusalem, we don't want to also be stealing parts of Egypt, Syria, etc.
						any_sub_realm_county = {
							count = all
							target_is_de_jure_liege_or_above = scope:target_title
						}
					}
				}

				# Mark this vassal as being eligible to transfer from the defender to the attacker.
				holder = {
					if = {
						limit = {
							NOT = { is_in_list = potential_vassals }
						}				
						add_to_list = potential_vassals	
					}
				}
			}
			ordered_in_list = {
				list = potential_vassals
				order_by = highest_held_title_tier
				max = 99
				check_range_bounds = no

				if = {
					# If a liege has already been added to the vassalization list, skip us (we will remain our liege's vassal.)
					limit = {
						save_temporary_scope_as = this_vassal
						any_in_list = {
							list = vassals_taken
							target_is_vassal_or_below = scope:this_vassal
						}
					}
				}
				else = {
					# Flag this character to be vassalized instead of usurped.
					add_to_list = vassals_taken
					
					# Remove the counties this vassal holds from the siezed title list (the vassal gets to keep their land when switching allegiance!)
					every_sub_realm_county = {
						remove_from_list = titles_taken
					}	
				}
			}
		}

		every_in_list = {
			list = vassals_taken
			change_liege = {
				liege = scope:attacker
				change = scope:change
			}
		}
		
		every_in_list = {
			list = titles_taken
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
				take_baronies = yes
			}
		}


		resolve_title_and_vassal_change = scope:change

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = religious_cb_ally_prestige_duchy
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = religious_cb_ally_prestige_duchy
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Piety Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_piety_experience = {
					add = religious_cb_piety_gain_duchy
					if = {
						limit = {
							scope:attacker.faith = {
								has_doctrine_parameter = bonus_holy_war_piety_active
							}
						}
						multiply = 1.5
					}
					if = {
						limit = { has_character_modifier = devotion_gives_holy_war_cost_piety_gain_0 }
						multiply = 0.8
					}
					else_if = {
						limit = { has_character_modifier = devotion_gives_holy_war_cost_piety_gain_2 }
						multiply = 1.2
					}
					else_if = {
						limit = { has_character_modifier = devotion_gives_holy_war_cost_piety_gain_3 }
						multiply = 1.4
					}
					else_if = {
						limit = { has_character_modifier = devotion_gives_holy_war_cost_piety_gain_4 }
						multiply = 1.6
					}
					else_if = {
						limit = { has_character_modifier = devotion_gives_holy_war_cost_piety_gain_5 }
						multiply = 1.8
					}
					else_if = {
						limit = { has_character_modifier = devotion_gives_holy_war_cost_piety_gain_6 }
						multiply = 2
					}
				}
			}
		}
		
		ordered_in_list = {
			list = target_titles
			order_by = tier
			max = 1

			save_scope_as = war_goal_title
		}

		scope:attacker.faith = {
			change_fervor = {
				value = -2
				desc = fervor_loss_religious_war
			}
		}
		scope:defender.faith = {
			change_fervor = {
				value = 4
				desc = fervor_gain_religious_war
			}
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		desc = cleanse_abominations_white_peace_desc
	}

	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = religious_cb_ally_prestige_duchy
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = religious_cb_ally_prestige_duchy
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Truce
		add_truce_white_peace_effect = yes

		scope:attacker = {
			add_piety = religious_cb_piety_white_peace
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
		}

		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}
	}

	on_defeat_desc = {
		desc = cleanse_abominations_defeat_desc
	}

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
		
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes
		
		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_low_effect = yes }
		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = religious_cb_ally_prestige_duchy
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = religious_cb_ally_prestige_duchy
			opinion = {
				modifier = contributed_in_war
			}
		}

		# piety change
		every_in_list = {
			list = target_titles

			scope:defender = {
				add_piety = {
					add = religious_cb_piety_gain_duchy
					if = {
						limit = {
							scope:defender.faith = {
								has_doctrine_parameter = bonus_holy_war_piety_active
							}
						}
						multiply = 1.5
					}
					if = {
						limit = { scope:defender.faith = { has_doctrine_parameter = devotion_gives_holy_war_cost_piety_gain } }
						if = {
							limit = { scope:defender = { piety_level = 0 } }
							multiply = 0.8
						}
						# if the piety level is 1, we don't need to multiply by 1
						else_if = {
							limit = { scope:defender = { piety_level = 2 } }
							multiply = 1.2
						}
						else_if = {
							limit = { scope:defender = { piety_level = 3 } }
							multiply = 1.4
						}
						else_if = {
							limit = { scope:defender = { piety_level = 4 } }
							multiply = 1.6
						}
						else_if = {
							limit = { scope:defender = { piety_level = 5 } }
							multiply = 1.8
						}
						else_if = {
							limit = { scope:defender = { piety_level = 6 } }
							multiply = 2
						}
					}
				}
			}

			scope:attacker = {
				if = {
					limit = {
						monthly_character_income > 0
					}
					pay_short_term_income = {
						years = 3
						target = scope:defender
					}
				}
				else = {
					pay_short_term_gold = {
						target = scope:defender
						gold = medium_gold_value
					}
				}
			}
		}

		scope:attacker = {
			every_vassal = {
				limit = { faith = scope:attacker.faith }
				custom = all_attackers_vassals_same_faith
				add_opinion = {
					modifier = liege_lost_declared_religious_war
					target = scope:attacker
				}
			}
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "CLEANSE_ABOMINATIONS_NAME"
	cb_name = "CLEANSE_ABOMINATIONS_DUCHY_NAME"

	interface_priority = 80

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8

	max_ai_diplo_distance_to_title = 500
}
### EK EDIT: New cb - Expel Monsters, for use against cultures with the Pariah Folk innovation (Orcs, Goblins, Betrayed Falmer)
# based on Cleanse Abominations
expel_monsters = {
	# COMP 1.9 TODO: CB ICON
	group = conquest

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	allowed_for_character_display_regardless = {
		prestige_level >= 2
	}
	
	### Can use against:
	# A culture who you consider monstrous when you yourself isn't a monster, no sir
	allowed_against_character = {
		can_expel_pariah = { CHARACTER1 = scope:defender CHARACTER2 = scope:attacker }
		scope:attacker = {
			ALL_FALSE = {
				top_liege = scope:defender.top_liege
				liege = scope:defender
			}
		}
	}
	target_titles = neighbor_land_or_water
	target_title_tier = all
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder

	valid_to_start = {
		scope:target = {
			tier = tier_duchy
		}
	}

	should_invalidate = {
		OR = {
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier = tier_county
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
				}
			}
		}
	}

	on_invalidated_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					NOT = {
						any_in_list = {
							list = target_titles
							any_in_de_jure_hierarchy = {
								tier = tier_county
								holder = {
									OR = {
										this = scope:defender
										target_is_liege_or_above = scope:defender
									}
								}
							}
						}
					}
				}
				desc = msg_religious_war_invalidation_region_message
			}
		}
	}

	on_invalidated = {
		
	}

	cost = {
		prestige = {
			add = {
				value = 200
				desc = CB_BASE_COST
			}

			# Bellum Justum Perk
			if = {
				limit = {
					scope:attacker = {
						has_perk = bellum_justum_perk
					}
				}
				multiply = {
					add = bellum_justum_discount_percentage
					divide = 100
					desc = CB_ATTACKER_BELLUM_JUSTUM
				}
			}

			# Dynasty Warfare Perk
			if = {
				limit = {
					scope:attacker = {
						has_dynasty = yes
						dynasty = {
							has_dynasty_perk = warfare_legacy_2
						}
					}
				}
				multiply = {
					value = warfare_legacy_2_discount
					desc = CB_ATTACKER_DYNASTY_WARFARE
				}
			}

			# Vassal contract in-realm cost reduction
			if = {
				limit = {
					scope:attacker = {
						is_independent_ruler = no
						vassal_contract_has_flag = vassal_contract_war_override
						liege = scope:defender.liege
					}
				}
				multiply = {
					value = war_declaration_rights_allowed_cost_reduction
					desc = "CB_ATTACKER_VASSAL_CONTRACT"
				}
			}

			if = {
				limit = {
					has_game_rule = no_cost_casus_belli_costs
				}
				multiply = {
					value = 0
					desc = CB_GAME_RULE_NO_COST
				}
			}
		}
	}

	on_declaration = {
		on_declared_war = yes
	}

	on_victory_desc = {
		desc = expel_monsters_victory_desc
	}

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }

		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

		#EP2 accolade glory gain from winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		create_title_and_vassal_change = {
			type = conquest_holy_war
			save_scope_as = change
			add_claim_on_loss = yes
		}

		# go through the dejure hierarchy under target titles, transfer titles held by abominations
		# take the holder as vassal otherwise and don't go deeper
		every_in_list = {
			list = target_titles
			custom_tooltip = RELIGIOUS_CB_TITLE

			save_scope_as = target_title # For the vassalization trigger.

			# Compile a list of all counties in the kingdom we will take from the defender.
			every_in_de_jure_hierarchy = {
				continue = {
					tier > tier_county
				}
				limit = {
					tier = tier_county

					# Current holder must be a (sub)vassal of the defender (no poaching titles from 3rd parties!)
					exists = holder
					holder = {
						OR = {
							this = scope:defender
							target_is_liege_or_above = scope:defender
						}
					}
				}
				add_to_list = titles_taken
			}

			# If we can take the current holder of a title as a vassal instead of siezing their land directly, do so.
			every_in_de_jure_hierarchy = {
				limit = {
					tier >= tier_county
					# If there is no holder they can't be vassalized!
					exists = holder

					# We can only vassalize characters of a lower tier than us.
					holder.highest_held_title_tier < scope:attacker.highest_held_title_tier

					# Monster Check
					# Vassals who are not considered monsters are 'liberated' and become vassals under the attacker.
					holder.culture = { NOT = { has_innovation = innovation_pariah_folk }}		

					# De Jure Hierarchy Check
					holder = {
						# Only (sub)vassals of the defender can be considered for transfer (no poaching vassals from 3rd parties without fighting them!)
						target_is_liege_or_above = scope:defender

						# *All* of a character's subrealm must be within the target area. If we're holy warring for Jerusalem, we don't want to also be stealing parts of Egypt, Syria, etc.
						any_sub_realm_county = {
							count = all
							target_is_de_jure_liege_or_above = scope:target_title
						}
					}
				}

				# Mark this vassal as being eligible to transfer from the defender to the attacker.
				holder = {
					if = {
						limit = {
							NOT = { is_in_list = potential_vassals }
						}				
						add_to_list = potential_vassals	
					}
				}
			}
			ordered_in_list = {
				list = potential_vassals
				order_by = highest_held_title_tier
				max = 99
				check_range_bounds = no

				if = {
					# If a liege has already been added to the vassalization list, skip us (we will remain our liege's vassal.)
					limit = {
						save_temporary_scope_as = this_vassal
						any_in_list = {
							list = vassals_taken
							target_is_vassal_or_below = scope:this_vassal
						}
					}
				}
				else = {
					# Flag this character to be vassalized instead of usurped.
					add_to_list = vassals_taken
					
					# Remove the counties this vassal holds from the siezed title list (the vassal gets to keep their land when switching allegiance!)
					every_sub_realm_county = {
						remove_from_list = titles_taken
					}	
				}
			}
		}

		every_in_list = {
			list = vassals_taken
			change_liege = {
				liege = scope:attacker
				change = scope:change
			}
		}
		
		every_in_list = {
			list = titles_taken
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
				take_baronies = yes
			}
		}


		resolve_title_and_vassal_change = scope:change

		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = medium_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}
		
		ordered_in_list = {
			list = target_titles
			order_by = tier
			max = 1

			save_scope_as = war_goal_title
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		desc = expel_monsters_white_peace_desc
	}

	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }

		scope:attacker = {
			add_prestige = {
				value = minor_prestige_value
				multiply = -1.0
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker # not impactful as the scale are identical
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		desc = expel_monsters_defeat_desc
	}

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
		
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_low_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = major_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "EXPEL_MONSTERS_NAME"
	cb_name = "EXPEL_MONSTERS_DUCHY_NAME"

	interface_priority = 80

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8

	max_ai_diplo_distance_to_title = 500
}

### New cb - Banish Demon, for use against cultures with the Daedric Race innovation (Dremora)
# based on Cleanse Abominations
banish_demon = {
	# COMP 1.9 TODO: CB ICON
	group = conquest

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	allowed_for_character_display_regardless = {
		prestige_level >= 2
	}
	
	### Can use against:
	# A culture who is not of this world when you yourself do not serve the Daedra or is one
	allowed_against_character = {
		can_discriminate_daedric_race = { CHARACTER1 = scope:defender CHARACTER2 = scope:attacker }
		scope:attacker = { 
			ALL_FALSE = {
				top_liege = scope:defender.top_liege
				liege = scope:defender
			}
		}	
	}
	target_titles = neighbor_land_or_water
	target_title_tier = all
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder

	valid_to_start = {
		scope:target = {
			tier = tier_duchy
		}
	}

	should_invalidate = {
		OR = {
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier = tier_county
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
				}
			}
		}
	}

	on_invalidated_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					NOT = {
						any_in_list = {
							list = target_titles
							any_in_de_jure_hierarchy = {
								tier = tier_county
								holder = {
									OR = {
										this = scope:defender
										target_is_liege_or_above = scope:defender
									}
								}
							}
						}
					}
				}
				desc = msg_religious_war_invalidation_region_message
			}
		}
	}

	on_invalidated = {
		
	}

	cost = {
		prestige = {
			add = {
				value = 200
				desc = CB_BASE_COST
			}

			# Bellum Justum Perk
			if = {
				limit = {
					scope:attacker = {
						has_perk = bellum_justum_perk
					}
				}
				multiply = {
					add = bellum_justum_discount_percentage
					divide = 100
					desc = CB_ATTACKER_BELLUM_JUSTUM
				}
			}

			# Dynasty Warfare Perk
			if = {
				limit = {
					scope:attacker = {
						has_dynasty = yes
						dynasty = {
							has_dynasty_perk = warfare_legacy_2
						}
					}
				}
				multiply = {
					value = warfare_legacy_2_discount
					desc = CB_ATTACKER_DYNASTY_WARFARE
				}
			}

			# Vassal contract in-realm cost reduction
			if = {
				limit = {
					scope:attacker = {
						is_independent_ruler = no
						vassal_contract_has_flag = vassal_contract_war_override
						liege = scope:defender.liege
					}
				}
				multiply = {
					value = war_declaration_rights_allowed_cost_reduction
					desc = "CB_ATTACKER_VASSAL_CONTRACT"
				}
			}

			if = {
				limit = {
					has_game_rule = no_cost_casus_belli_costs
				}
				multiply = {
					value = 0
					desc = CB_GAME_RULE_NO_COST
				}
			}
		}
	}

	on_declaration = {
		on_declared_war = yes
	}

	on_victory_desc = {
		desc = banish_demon_victory_desc
	}

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }

		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

		#EP2 accolade glory gain from winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		create_title_and_vassal_change = {
			type = conquest_holy_war
			save_scope_as = change
			add_claim_on_loss = yes
		}

		# go through the dejure hierarchy under target titles, transfer titles held by abominations
		# take the holder as vassal otherwise and don't go deeper
		every_in_list = {
			list = target_titles
			custom_tooltip = RELIGIOUS_CB_TITLE

			save_scope_as = target_title # For the vassalization trigger.

			# Compile a list of all counties in the kingdom we will take from the defender.
			every_in_de_jure_hierarchy = {
				continue = {
					tier > tier_county
				}
				limit = {
					tier = tier_county

					# Current holder must be a (sub)vassal of the defender (no poaching titles from 3rd parties!)
					exists = holder
					holder = {
						OR = {
							this = scope:defender
							target_is_liege_or_above = scope:defender
						}
					}
				}
				add_to_list = titles_taken
			}

			# If we can take the current holder of a title as a vassal instead of siezing their land directly, do so.
			every_in_de_jure_hierarchy = {
				limit = {
					tier >= tier_county
					# If there is no holder they can't be vassalized!
					exists = holder

					# We can only vassalize characters of a lower tier than us.
					holder.highest_held_title_tier < scope:attacker.highest_held_title_tier

					# Daedra Check
					# Vassals who are not Daedra are 'liberated' and become vassals under the attacker.
					holder.culture = { NOT = { has_innovation = innovation_daedric_race }}		

					# De Jure Hierarchy Check
					holder = {
						# Only (sub)vassals of the defender can be considered for transfer (no poaching vassals from 3rd parties without fighting them!)
						target_is_liege_or_above = scope:defender

						# *All* of a character's subrealm must be within the target area. If we're holy warring for Jerusalem, we don't want to also be stealing parts of Egypt, Syria, etc.
						any_sub_realm_county = {
							count = all
							target_is_de_jure_liege_or_above = scope:target_title
						}
					}
				}

				# Mark this vassal as being eligible to transfer from the defender to the attacker.
				holder = {
					if = {
						limit = {
							NOT = { is_in_list = potential_vassals }
						}				
						add_to_list = potential_vassals	
					}
				}
			}
			ordered_in_list = {
				list = potential_vassals
				order_by = highest_held_title_tier
				max = 99
				check_range_bounds = no

				if = {
					# If a liege has already been added to the vassalization list, skip us (we will remain our liege's vassal.)
					limit = {
						save_temporary_scope_as = this_vassal
						any_in_list = {
							list = vassals_taken
							target_is_vassal_or_below = scope:this_vassal
						}
					}
				}
				else = {
					# Flag this character to be vassalized instead of usurped.
					add_to_list = vassals_taken
					
					# Remove the counties this vassal holds from the siezed title list (the vassal gets to keep their land when switching allegiance!)
					every_sub_realm_county = {
						remove_from_list = titles_taken
					}	
				}
			}
		}

		every_in_list = {
			list = vassals_taken
			change_liege = {
				liege = scope:attacker
				change = scope:change
			}
		}
		
		every_in_list = {
			list = titles_taken
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
				take_baronies = yes
			}
		}


		resolve_title_and_vassal_change = scope:change

		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = medium_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}
		
		ordered_in_list = {
			list = target_titles
			order_by = tier
			max = 1

			save_scope_as = war_goal_title
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		desc = banish_demon_white_peace_desc
	}

	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }

		scope:attacker = {
			add_prestige = {
				value = minor_prestige_value
				multiply = -1.0
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker # not impactful as the scale are identical
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		desc = banish_demon_defeat_desc
	}

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }

		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_low_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = major_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "BANISH_DEMON_NAME"
	cb_name = "BANISH_DEMON_DUCHY_NAME"

	interface_priority = 80

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8

	max_ai_diplo_distance_to_title = 500
}

clutch_raid_war_cb = {
	icon = ducal_conquest_cb
	group = religious_disorganised
	ai_only_against_neighbors = yes
	allow_hostages = no
	
	attacker_score_from_occupation_scale = 150
	attacker_score_from_battles_scale = 150
	defender_score_from_battles_scale = 150

	# Root is the title
	# scope:attacker is the attacker
	# scope:defender is the defender
	allowed_against_character = {
		scope:attacker = {
			faith = { has_doctrine_parameter = clutch_raid_war_cb_active }
		}

		scope:defender = {
			is_independent_ruler = yes
			culture = { has_cultural_pillar = heritage_argonian }
			NOT = { faith = { has_doctrine_parameter = clutch_raid_war_cb_active } }
			trigger_if = {
				limit = { scope:attacker = { is_ai = no } } # Already pre-filtered by the AI due to ai_only_against_neighbors = yes. any_neighboring_top_liege_realm_owner is expensive
				scope:attacker = {
					any_neighboring_top_liege_realm_owner = {
						this = scope:defender
					}
				}
			}
		}
	}

	cost = {
		piety = {
			add = {
				value = 100
				desc = CB_BASE_COST
			}
			multiply = common_cb_piety_cost_multiplier
		}
	}

	should_invalidate = {
	}

	on_invalidated_desc = {
	}

	on_invalidated = {
		
	}

	on_declaration = {
		on_declared_war = yes
	}

	on_victory_desc = {
		desc = clutch_raid_war_victory_desc
	}

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }

		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

		#EP2 Accolade glory gain from winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }

		scope:attacker = {
			if = {
				limit = { scope:defender.primary_title.tier = tier_county }
				add_piety = { value = minor_piety_gain }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_duchy }
				add_piety = { value = medium_piety_gain }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_kingdom }
				add_piety = { value = major_piety_gain }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_empire }
				add_piety = { value = massive_piety_gain }
			}
		}
		scope:defender = {
			if = {
				limit = { scope:defender.primary_title.tier = tier_county }
				add_prestige = { value = minor_prestige_loss }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_duchy }
				add_prestige = { value = medium_prestige_loss }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_kingdom }
				add_prestige = { value = major_prestige_loss }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_empire }
				add_prestige = { value = massive_prestige_loss }
			}
		}
		scope:attacker = {	#If the attacker has the appropriate tenet, grab some suitable children from the defender.
			if = {
				limit = {
					faith = { has_doctrine_parameter = clutch_raid_war_cb_active}
				}
				custom_tooltip = clutch_raid_war_prisoners.tt_attacker
				hidden_effect = {
					scope:defender = {
						every_courtier_or_guest = { add_to_list = potential_captives_list }
						random_in_list = {	#Nab someone related to the defender, preferring children.
							list = potential_captives_list
							limit = {
								is_adult = no
							}
							alternative_limit = { 
								is_adult = yes
							}
							weight = {
								base = 1
								modifier = {
									add = 25
									NOT = { is_close_family_of = scope:defender }
								}
								modifier = {
									add = 15
									NOT = { is_extended_family_of = scope:defender }
								}
							}
							add_to_list = definite_captives_list
							save_temporary_scope_as = future_captive
								scope:attacker = {
									imprison = {
										target = scope:future_captive
										type = house_arrest
									}
								}
						}
						random_in_list = {	#Always try to grab a second person.
							list = potential_captives_list
							limit = {
								NOT = { is_in_list = definite_captives_list }
							}
							weight = {
								base = 1
								modifier = {
									add = 40
									NOT = {
										any_claim = {
											useful_courtier_or_guest_claim_trigger = { RULER = scope:defender }
										}
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_chancellor_trigger = { COURT_OWNER = scope:defender }
										diplomacy >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_marshal_trigger = { COURT_OWNER = scope:defender }
										martial >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_steward_trigger = { COURT_OWNER = scope:defender }
										stewardship >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_spymaster_trigger = { COURT_OWNER = scope:defender }
										intrigue >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NOT = { learning >= high_skill_rating }
								}
								modifier = {
									add = 10
									NOT = {	prowess >= high_skill_rating }
								}
								modifier = {
									add = 50
									NOT = { is_close_or_extended_family_of = scope:defender }
								}
							}
							add_to_list = definite_captives_list
							save_temporary_scope_as = future_captive
								scope:attacker = {
									imprison = {
										target = scope:future_captive
										type = dungeon
									}
								}
						}
						random_in_list = {	#Always try to grab a third person.
							list = potential_captives_list
							limit = {
								NOT = { is_in_list = definite_captives_list }
							}
							weight = {
								base = 1
								modifier = {
									add = 40
									NOT = {
										any_claim = {
											useful_courtier_or_guest_claim_trigger = { RULER = scope:defender }
										}
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_chancellor_trigger = { COURT_OWNER = scope:defender }
										diplomacy >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_marshal_trigger = { COURT_OWNER = scope:defender }
										martial >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_steward_trigger = { COURT_OWNER = scope:defender }
										stewardship >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_spymaster_trigger = { COURT_OWNER = scope:defender }
										intrigue >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NOT = { learning >= high_skill_rating }
								}
								modifier = {
									add = 10
									NOT = {	prowess >= high_skill_rating }
								}
								modifier = {
									add = 50
									NOT = { is_close_or_extended_family_of = scope:defender }
								}
							}
							add_to_list = definite_captives_list
							save_temporary_scope_as = future_captive
								scope:attacker = {
									imprison = {
										target = scope:future_captive
										type = dungeon
									}
								}
						}
						if = {	#If at least duchy-tier, try to grab a fourth person.
							limit = { primary_title.tier >= tier_duchy }
							random_in_list = {
								list = potential_captives_list
								limit = {
									NOT = { is_in_list = definite_captives_list }
								}
								weight = {
									base = 1
									modifier = {
										add = 40
										NOT = {
											any_claim = {
												useful_courtier_or_guest_claim_trigger = { RULER = scope:defender }
											}
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_chancellor_trigger = { COURT_OWNER = scope:defender }
											diplomacy >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_marshal_trigger = { COURT_OWNER = scope:defender }
											martial >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_steward_trigger = { COURT_OWNER = scope:defender }
											stewardship >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_spymaster_trigger = { COURT_OWNER = scope:defender }
											intrigue >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NOT = { learning >= high_skill_rating }
									}
									modifier = {
										add = 10
										NOT = { prowess >= high_skill_rating }
									}
								}
								add_to_list = definite_captives_list
								save_temporary_scope_as = future_captive
								scope:attacker = {
									imprison = {
										target = scope:future_captive
										type = dungeon
									}
								}
							}
						}
						if = {	#If at least kingdom-tier, try to grab a fifth person.
							limit = { primary_title.tier >= tier_kingdom }
							random_in_list = {
								list = potential_captives_list
								limit = {
									NOT = { is_in_list = definite_captives_list }
								}
								weight = {
									base = 1
									modifier = {
										add = 40
										NOT = {
											any_claim = {
												useful_courtier_or_guest_claim_trigger = { RULER = scope:defender }
											}
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_chancellor_trigger = { COURT_OWNER = scope:defender }
											diplomacy >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_marshal_trigger = { COURT_OWNER = scope:defender }
											martial >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_steward_trigger = { COURT_OWNER = scope:defender }
											stewardship >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_spymaster_trigger = { COURT_OWNER = scope:defender }
											intrigue >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NOT = { learning >= high_skill_rating }
									}
									modifier = {
										add = 10
										NOT = { prowess >= high_skill_rating }
									}
								}
								add_to_list = definite_captives_list
								save_temporary_scope_as = future_captive
								scope:attacker = {
									imprison = {
										target = scope:future_captive
										type = dungeon
									}
								}
							}
						}
					}
					trigger_event = { #EK TODO: adoption event
						id = human_sacrifice.0001
						years = 2
					}
				}
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = major_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_attacker_victory_effect = yes

	}

	on_white_peace_desc = {
		desc = clutch_raid_war_white_peace_desc
	}

	on_white_peace = {
		scope:attacker = { 
			show_pow_release_message_effect = yes
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
		}
		scope:attacker = {	#Piety loss for the attacker if appropriate, otherwise prestige loss.
			if = {
				limit = {
					faith = { has_doctrine_parameter = clutch_raid_war_cb_active}
				}
				add_piety = religious_cb_piety_white_peace
			}
			else = {
				add_prestige = {
					value = medium_prestige_loss
				}
			}
		}



		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker # not important as the scales are identical
			FAME_BASE = major_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}

		# Truce
		add_truce_attacker_victory_effect = yes

	}

	on_defeat_desc = {
		desc = clutch_raid_war_defeat_desc
	}

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }

		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

		#EP2 Accolade glory gain from winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_low_effect = yes }

		scope:attacker = {
			if = {
				limit = { scope:attacker.primary_title.tier = tier_county }
				add_prestige = { value = minor_prestige_loss }
			}
			if = {
				limit = { scope:attacker.primary_title.tier = tier_duchy }
				add_prestige = { value = medium_prestige_loss }
			}
			if = {
				limit = { scope:attacker.primary_title.tier = tier_kingdom }
				add_prestige = { value = major_prestige_loss }
			}
			if = {
				limit = { scope:attacker.primary_title.tier = tier_empire }
				add_prestige = { value = massive_prestige_loss }
			}
		}			
		scope:defender = {
			if = {
				limit = { scope:attacker.primary_title.tier = tier_county }
				add_prestige = { value = minor_prestige_gain }
			}
			if = {
				limit = { scope:attacker.primary_title.tier = tier_duchy }
				add_prestige = { value = medium_prestige_gain }
			}
			if = {
				limit = { scope:attacker.primary_title.tier = tier_kingdom }
				add_prestige = { value = major_prestige_gain }
			}
			if = {
				limit = { scope:attacker.primary_title.tier = tier_empire }
				add_prestige = { value = massive_prestige_gain }
			}
		}
		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = major_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		scope:attacker = { save_temporary_scope_as = loser }
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "CLUTCH_RAID_WAR_NAME"
	war_name_base = "CLUTCH_RAID_WAR_NAME_BASE"
	cb_name = "CLUTCH_RAID_CB_NAME"
	interface_priority = 80

	ticking_war_score_targets_entire_realm = yes
	attacker_ticking_warscore = 0
	attacker_wargoal_percentage = 0.01
	attacker_score_from_occupation_scale = 50
	defender_score_from_occupation_scale = 50
	attacker_score_from_battles_scale = 200
	defender_score_from_battles_scale = 200

	max_attacker_score_from_battles = 200
	max_defender_score_from_battles = 200
	
	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150

	max_ai_diplo_distance_to_title = 500
	
	ai_score = {
		value = clutch_raid_ai_score_value
	}

	ai_score_mult = {
		value = 1
		# Increase odds if the character is a vassal with Ghazi Contract
		add = {
			if = {
				limit = {
					scope:attacker = {
						is_independent_ruler = no
						vassal_contract_has_flag = vassal_contract_cheaper_religious_war
					}
				}
				add = 1
			}
		}
		# Holy War are limited to connected neighbour to limit big empire expansions over weak realms.
		add = {
			if = {
				limit = {  religious_war_vassals_constraints = yes }
				add = -1000
			}
		}
	}
}
